#include <iostream> 
using namespace std;
// ---------------------khai bao danh sach------------------------
struct Node
{
    int data;
    Node *next;
    Node *prev;
};

struct DoubleLinkedList
{
    Node *head;
    Node *tail;
};

void Init(DoubleLinkedList &ls)
{
    ls.head = NULL;
    ls.tail = NULL;
}

Node *createNode(int x)
{
    Node *p = new Node;
    p->data = x;
    p->next = NULL;
    p->prev = NULL;
    return p;
}
//--------------------add pt--------------------------------
void addFirst(DoubleLinkedList &ls, int x)
{
    Node *p = createNode(x);
    if (ls.head == NULL)
    {
        ls.head = ls.tail = p;
    }
    else {
        p->next = ls.head;
        ls.head->prev = p;
        ls.head = p;
    }
}

void addLast(DoubleLinkedList &ls, int x)
{
    Node *p = createNode(x);
    if (ls.head == NULL)
    {
        ls.head = ls.tail = p;
    }
    else 
    {
        p->prev = ls.tail;
        ls.tail->next = p;
        ls.tail = p;
    }
}

void addAfter(DoubleLinkedList &ls, int v, int x)
{
    Node *q =  ls.head;
    while (q != NULL && q->data != v)
        q = q->next;
    if (q != NULL)
    {
        if (q == ls.tail)
            addLast(ls, x);
        else{
            Node *p = createNode(x);
            p->next = q->next;
            q->next->prev = p;

            q->next = p;
            p->prev = q;
        }
    }

}
//----------------------------------xoa pt-------------------------
void deleteFirst(DoubleLinkedList &ls)
{
    if (ls.head != NULL)
    {
        Node *p = ls.head;
        
        if (p->next == NULL) // ds co 1 phan tu
        {
            ls.tail = NULL;
            ls.head = NULL;
        }
        else
        {
            ls.head = p->next;
            p->next->prev = NULL;
            p->next = NULL;
        }
        
        delete(p);
    }
}

void deleteLast(DoubleLinkedList &ls)
{
    if (ls.head != NULL)
    {
        Node *p = ls.tail;
        
        if (p->prev == NULL) // ds co 1 phan tu
        {
            ls.tail = NULL;
            ls.head = NULL;
        }
        else 
        {
            ls.tail = p->prev;
            p->prev->next = NULL;
            p->prev = NULL;
        }

        delete(p);
    }
}

//------------------- xuat -----------------------------
void outputLeftToRight(const DoubleLinkedList ls)
{
    Node *p = ls.head;
    while (p != ls.tail)
    {
        cout << p->data << " ";
        p = p->next;
    }
    cout << p->data << "\n";
}

void outputRightToLeft(const DoubleLinkedList ls)
{
    Node *p = ls.tail;
    while (p != ls.head)
    {
        cout << p->data << " ";
        p = p->prev;
    }
    cout << p->data << "\n";
}

Node *find(DoubleLinkedList ls, int x)
{
    Node *p = ls.head; // tạo node p và đồng thời gán bằng phần tử đầu danh sách
    // sử dụng vòng lặp
    while ((p != NULL) && (p->data !=x))
    {
        p = p->next;
    }
    // trả về kết quả, nếu NULL thì không tìm thấy
    return p;
}

// sắp xếp danh sách liên kết đôi bằng thuật toán bubble sort
void bubbleSort(DoubleLinkedList &ls) {
    int swapped;
    Node* ptr1;

    /* Kiểm tra xem danh sách đã rỗng chưa */
    if (ls.head == NULL)
        return;

    do {
        swapped = 0;
        ptr1 = ls.head;

        while (ptr1->next != ls.tail) {
            if (ptr1->data > ptr1->next->data) {
                // hoán đổi giá trị của hai nút
                int temp = ptr1->data;
                ptr1->data = ptr1->next->data;
                ptr1->next->data = temp;
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        ls.tail = ptr1;
    } while (swapped);
}

void bubbleSort2(DoubleLinkedList &ls)
{
    Node *p, *q;
    if (ls.head == NULL)
        return;

    p = ls.head;
    while (p != ls.tail)
    {
        q = p->next;
        while (q != NULL)
        {
            if (p->data > q->data)
                swap(p->data, q->data);
            q = q->next;
        }
        p = p->next;
    }
}

void swapNodes(DoubleLinkedList& ls, Node* a, Node* b) {
    if (a == b) return;
    if (ls.head == a)
        ls.head = b;
    else if (ls.head == b)
        ls.head = a;
    if (ls.tail == a)
        ls.tail = b;
    else if (ls.tail == b)
        ls.tail = a;
    Node* tmp1 = a->prev, *tmp2 = b->prev;
    a->prev = b->prev = NULL;

    if (tmp1 != NULL) {
        tmp1->next = b;
        b->prev = tmp1;
    }else cout << "OK1\n";

    if (tmp2 != NULL) {
        tmp2->next = a;
        a->prev = tmp2;
    }else cout << "OK2\n";

    tmp1 = a->next, tmp2 = b->next;
    a->next = b->next = NULL;
    if (tmp1 != NULL) {
        tmp1->prev = b;
        b->next = tmp1;
    }else cout << "OK1\n";

    if (tmp2 != NULL) {
        tmp2->prev = a;
        a->next = tmp2;
    }
    else cout << "OK2\n";
    return;
   
    //swap (a->data, b->data);
}

Node* partition(DoubleLinkedList& ls, Node* head, Node* tail) {
    int pivot = tail->data;
    Node* vt = head->prev;

    for (Node* i = head; i != tail; i = i->next) {
        if (i->data < pivot) {
            vt = vt->next;
            cout << tail->data << ' ' << i->data << ' ' << vt->data << endl;
            swapNodes(ls, i, vt);
            swap(i, vt);
            outputLeftToRight(ls);
        }
    }
    vt = vt->next;
    swapNodes(ls, vt, tail);
    swap(vt, tail);
    cout << "End\n";
    return vt;
}

bool check(DoubleLinkedList ls, Node* head, Node* tail) {
    return (head != tail && head != tail->next);
}

void quickSort(DoubleLinkedList& ls, Node* head, Node* tail) {
    if (check(ls, head, tail)) {
        Node* pivot = partition(ls, head, tail);
        if (check(ls, head, pivot->prev))
            quickSort(ls, head, pivot->prev);
        if (check(ls, pivot->next, tail))
            quickSort(ls, pivot->next, tail);
    }
}

void sortDoublyLinkedList(DoubleLinkedList &ls) {
    ls.head->prev = createNode(0);
    ls.head->prev->next = ls.head;
    ls.tail->next = createNode(0);
    ls.tail->next->prev = ls.tail;
    quickSort(ls, ls.head, ls.tail);
}


int main()
{
    DoubleLinkedList ls;
    Init(ls);
    
    addLast(ls, 10);
    addFirst(ls, 9);
    addFirst(ls, 25);
    addLast(ls, 36);
    addAfter(ls, 9, 11);
    addAfter(ls, 36, 99);
    cout << "Danh sach ban dau: ";
    outputLeftToRight(ls);
    // swapNodes(ls, ls.head, ls.tail);
    // swapNodes(ls, ls.head->next, ls.tail->prev->prev);
    // outputLeftToRight(ls);
    // return 0;
    // Node *p = find (ls, 11);
    // if (p != NULL) 
    //     cout << "Tim thay trong danh sach." << "\n";
    // else
    //     cout << "Khong co trong danh sach." << "\n";
    cout << "Danh sach sau sort: ";
    // return 0;
    //bubbleSort2(ls);
    sortDoublyLinkedList(ls);
    outputLeftToRight(ls);
    cout << "\nuwuw\n";
    return 0;
}